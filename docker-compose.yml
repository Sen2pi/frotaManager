services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fleet-postgres
    environment:
      POSTGRES_DB: fleetdb
      POSTGRES_USER: fleetuser
      POSTGRES_PASSWORD: fleetpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - fleet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleetuser -d fleetdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fleet-backend
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/fleetdb
      SPRING_DATASOURCE_USERNAME: fleetuser
      SPRING_DATASOURCE_PASSWORD: fleetpass
      JWT_SECRET: altenFleetManagementSecretKey2024ForSecureTokenGeneration
      JWT_EXPIRATION: 86400000
    ports:
      - "8080:8080"
    networks:
      - fleet-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/auth/test || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fleet-frontend
    ports:
      - "80:8080"
    networks:
      - fleet-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: fleet-redis
    ports:
      - "6379:6379"
    networks:
      - fleet-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  fleet-network:
    driver: bridge